{"/home/travis/build/npmtest/node-npmtest-datadog-metrics/test.js":"/* istanbul instrument in package npmtest_datadog_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/lib.npmtest_datadog_metrics.js":"/* istanbul instrument in package npmtest_datadog_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_datadog_metrics = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_datadog_metrics = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-datadog-metrics && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_datadog_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_datadog_metrics\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_datadog_metrics.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_datadog_metrics.rollup.js'] =\n            local.assetsDict['/assets.npmtest_datadog_metrics.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_datadog_metrics.__dirname + '/lib.npmtest_datadog_metrics.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/node_modules/datadog-metrics/index.js":"'use strict';\nvar loggers = require('./lib/loggers');\n\nvar sharedLogger = null;\n\n//\n// opts may include:\n//\n//     - apiKey: DataDog API key\n//     - appKey: DataDog APP key\n//     - host: Default host for all reported metrics\n//     - prefix: Default key prefix for all metrics\n//     - defaultTags: Common tags for all metrics\n//     - flushIntervalSeconds:\n//\n// You can also use it to override (dependency-inject) the aggregator\n// and reporter instance, which is useful for testing:\n//\n//     - aggregator: an Aggregator instance\n//     - reporter: a Reporter instance\n//\nfunction init(opts) {\n    opts = opts || {};\n    opts.flushIntervalSeconds = opts.flushIntervalSeconds || 15;\n    sharedLogger = new loggers.BufferedMetricsLogger(opts);\n}\n\n// This is meant to be curried via bind() so we don't have\n// to write wrappers for each metric individually.\nfunction callOnSharedLogger(funcName) {\n    if (sharedLogger === null) {\n        init();\n    }\n    var args = Array.prototype.slice.call(arguments, 1);\n    sharedLogger[funcName].apply(sharedLogger, args);\n}\n\n\nmodule.exports = {\n    init: init,\n    flush: callOnSharedLogger.bind(undefined, 'flush'),\n    gauge: callOnSharedLogger.bind(undefined, 'gauge'),\n    increment: callOnSharedLogger.bind(undefined, 'increment'),\n    histogram: callOnSharedLogger.bind(undefined, 'histogram'),\n\n    BufferedMetricsLogger: loggers.BufferedMetricsLogger\n};\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/node_modules/datadog-metrics/lib/loggers.js":"'use strict';\nvar debug = require('debug')('metrics');\n\nvar Aggregator = require('./aggregators').Aggregator;\nvar DataDogReporter = require('./reporters').DataDogReporter;\nvar Gauge = require('./metrics').Gauge;\nvar Counter = require('./metrics').Counter;\nvar Histogram = require('./metrics').Histogram;\n\n//\n// --- BufferedMetricsLogger\n//\n\n// This talks to the DataDog HTTP API to log a bunch of metrics.\n//\n// Because we don't want to fire off an HTTP request for each data point\n// this buffers all metrics in the given time slice and periodically\n// flushes them to DataDog.\n//\n// Look here if you want to learn more about the DataDog API:\n// >> http://docs.datadoghq.com/guides/metrics/ <<\n//\n//\n// `opts` may include:\n//\n//     - apiKey: DataDog API key\n//     - appKey: DataDog APP key\n//     - host: Default host for all reported metrics\n//     - prefix: Default key prefix for all metrics\n//     - flushIntervalSeconds:\n//\n// You can also use it to override (dependency-inject) the aggregator\n// and reporter instance, which is useful for testing:\n//\n//     - aggregator: an Aggregator instance\n//     - reporter: a Reporter instance\n//\nfunction BufferedMetricsLogger(opts) {\n    this.aggregator = opts.aggregator || new Aggregator(opts.defaultTags);\n    this.reporter = opts.reporter || new DataDogReporter(opts.apiKey, opts.appKey);\n    this.host = opts.host;\n    this.prefix = opts.prefix || '';\n    this.flushIntervalSeconds = opts.flushIntervalSeconds;\n\n    if (this.flushIntervalSeconds) {\n        debug('Auto-flushing every %d seconds', this.flushIntervalSeconds);\n    } else {\n        debug('Auto-flushing is disabled');\n    }\n\n    var self = this;\n    var autoFlushCallback = function() {\n        self.flush();\n        if (self.flushIntervalSeconds) {\n            var interval = self.flushIntervalSeconds * 1000;\n            var tid = setTimeout(autoFlushCallback, interval);\n            // Let the event loop exit if this is the only active timer.\n            tid.unref();\n        }\n    };\n\n    autoFlushCallback();\n}\n\n// Prepend the global key prefix and set the default host.\nBufferedMetricsLogger.prototype.addPoint = function(Type, key, value, tags) {\n    this.aggregator.addPoint(Type, this.prefix + key, value, tags, this.host);\n};\n\nBufferedMetricsLogger.prototype.gauge = function(key, value, tags) {\n    this.addPoint(Gauge, key, value, tags);\n};\n\nBufferedMetricsLogger.prototype.increment = function(key, value, tags) {\n    this.addPoint(Counter, key, value || 1, tags);\n};\n\nBufferedMetricsLogger.prototype.histogram = function(key, value, tags) {\n    this.addPoint(Histogram, key, value, tags);\n};\n\nBufferedMetricsLogger.prototype.flush = function(onSuccess, onError) {\n    var series = this.aggregator.flush();\n    if (series.length > 0) {\n        debug('Flushing %d metrics to DataDog', series.length);\n        this.reporter.report(series, onSuccess, onError);\n    } else {\n        debug('Nothing to flush');\n    }\n};\n\n\nmodule.exports = {\n    BufferedMetricsLogger: BufferedMetricsLogger\n};\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/node_modules/datadog-metrics/lib/aggregators.js":"'use strict';\n\n//\n// --- Aggregator\n//\n\nfunction Aggregator(defaultTags) {\n    this.buffer = {};\n    this.defaultTags = defaultTags || [];\n}\n\nAggregator.prototype.makeBufferKey = function(key, tags) {\n    tags = tags || [''];\n    return key + '#' + tags.concat().sort().join('.');\n};\n\nAggregator.prototype.addPoint = function(Type, key, value, tags, host) {\n    var bufferKey = this.makeBufferKey(key, tags);\n    if (!this.buffer.hasOwnProperty(bufferKey)) {\n        this.buffer[bufferKey] = new Type(key, tags, host);\n    }\n\n    this.buffer[bufferKey].addPoint(value);\n};\n\nAggregator.prototype.flush = function() {\n    var series = [];\n    for (var key in this.buffer) {\n        if (this.buffer.hasOwnProperty(key)) {\n            series = series.concat(this.buffer[key].flush());\n        }\n    }\n\n    // Concat default tags\n    if (this.defaultTags) {\n        for (var i = 0; i < series.length; i++) {\n            series[i].tags = this.defaultTags.concat(series[i].tags);\n        }\n    }\n\n    this.buffer = {};\n\n    return series;\n};\n\n\nmodule.exports = {\n    Aggregator: Aggregator\n};\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/node_modules/datadog-metrics/lib/reporters.js":"'use strict';\nvar debug = require('debug')('metrics');\nvar dogapi = require('dogapi');\n\n\n//\n// NullReporter\n//\n\nfunction NullReporter(apiKey, appKey) {\n\n}\n\nNullReporter.prototype.report = function(series, onSuccess, onError) {\n    // Do nothing.\n    onSuccess();\n};\n\n\n//\n// DataDogReporter\n//\n\nfunction DataDogReporter(apiKey, appKey) {\n    apiKey = apiKey || process.env.DATADOG_API_KEY;\n    appKey = appKey || process.env.DATADOG_APP_KEY;\n\n    if (!apiKey) {\n        throw new Error('DATADOG_API_KEY environment variable not set');\n    }\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    dogapi.initialize({api_key: apiKey, app_key: appKey});\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n}\n\nDataDogReporter.prototype.report = function(series, onSuccess, onError) {\n    var callback = function(err, res, status) {\n        if (err === null && status.toString()[0] === '2') {\n            debug('add_metrics succeeded (status=%s)', status);\n            if (typeof onSuccess === 'function') {\n                onSuccess();\n            }\n        } else {\n            debug(\n                'ERROR: add_metrics failed: %s (err=%s, status=%s)',\n                res, err, status\n            );\n            if (typeof onError === 'function') {\n                onError(err, res, status);\n            }\n        }\n    };\n\n    if (debug.enabled) {\n        // Only call stringify when debugging.\n        debug('Calling add_metrics with %s', JSON.stringify(series));\n    }\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    dogapi.metric.send_all(series, callback);\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n};\n\n\nmodule.exports = {\n    NullReporter: NullReporter,\n    DataDogReporter: DataDogReporter\n};\n","/home/travis/build/npmtest/node-npmtest-datadog-metrics/node_modules/datadog-metrics/lib/metrics.js":"'use strict';\nvar util = require('util');\n\n//\n// --- Metric (base class)\n//\n\nfunction Metric(key, tags, host) {\n    this.key = key;\n    this.tags = tags || [];\n    this.host = host || '';\n}\n\nMetric.prototype.addPoint = function() {\n    return null;\n};\n\nMetric.prototype.flush = function() {\n    return null;\n};\n\nMetric.prototype.posixTimestamp = function() {\n    return Math.round(Date.now() / 1000);\n};\n\nMetric.prototype.updateTimestamp = function() {\n    this.timestamp = this.posixTimestamp();\n};\n\nMetric.prototype.serializeMetric = function(value, type, key) {\n    return {\n        metric: key || this.key,\n        points: [[this.timestamp, value]],\n        type: type,\n        host: this.host,\n        tags: this.tags\n    };\n};\n\n\n//\n// --- Gauge\n//\n\n//\n// GAUGE\n// -----\n// Record the current *value* of a metric. They most recent value in\n// a given flush interval will be recorded. Optionally, specify a set of\n// tags to associate with the metric. This should be used for sum values\n// such as total hard disk space, process uptime, total number of active\n// users, or number of rows in a database table.\n//\n\nfunction Gauge(key, tags, host) {\n    Metric.call(this, key, tags, host);\n    this.value = 0;\n}\n\nutil.inherits(Gauge, Metric);\n\nGauge.prototype.addPoint = function(val) {\n    this.value = val;\n    this.updateTimestamp();\n};\n\nGauge.prototype.flush = function() {\n    return [this.serializeMetric(this.value, 'gauge')];\n};\n\n\n//\n// --- Counter\n//\n\n//\n// COUNTER\n// -------\n// Increment the counter by the given *value*. Optionally, specify a list of\n// *tags* to associate with the metric. This is useful for counting things\n// such as incrementing a counter each time a page is requested.\n//\n\nfunction Counter(key, tags, host) {\n    Metric.call(this, key, tags, host);\n    this.value = 0;\n}\n\nutil.inherits(Counter, Metric);\n\nCounter.prototype.addPoint = function(val) {\n    this.value += val;\n    this.updateTimestamp();\n};\n\nCounter.prototype.flush = function() {\n    return [this.serializeMetric(this.value, 'counter')];\n};\n\n//\n// --- Histogram\n//\n\n//\n// HISTOGRAM\n// ---------\n// Sample a histogram value. Histograms will produce metrics that\n// describe the distribution of the recorded values, namely the minimum,\n// maximum, average, count and the 75th, 85th, 95th and 99th percentiles.\n// Optionally, specify a list of *tags* to associate with the metric.\n//\n\nfunction Histogram(key, tags, host) {\n    Metric.call(this, key, tags, host);\n    this.min = Infinity;\n    this.max = -Infinity;\n    this.sum = 0;\n    this.count = 0;\n    this.samples = [];\n    this.percentiles = [0.75, 0.85, 0.95, 0.99];\n}\n\nutil.inherits(Histogram, Metric);\n\nHistogram.prototype.addPoint = function(val) {\n    this.updateTimestamp();\n\n    this.min = Math.min(val, this.min);\n    this.max = Math.max(val, this.max);\n    this.sum += val;\n    this.count += 1;\n\n    // The number of samples recorded is unbounded at the moment.\n    // If this becomes a problem we might want to limit how many\n    // samples we keep.\n    this.samples.push(val);\n};\n\nHistogram.prototype.flush = function() {\n    var points = [\n        this.serializeMetric(this.min, 'gauge', this.key + '.min'),\n        this.serializeMetric(this.max, 'gauge', this.key + '.max'),\n        this.serializeMetric(this.sum, 'gauge', this.key + '.sum'),\n        this.serializeMetric(this.count, 'gauge', this.key + '.count'),\n        this.serializeMetric(this.average(), 'gauge', this.key + '.avg')\n    ];\n\n    // Careful, calling samples.sort() will sort alphabetically giving\n    // the wrong result. We must define our own compare function.\n    var numericalSortAscending = function(a, b) { return a - b; };\n    this.samples.sort(numericalSortAscending);\n\n    var calcPercentile = function(p) {\n        var val = this.samples[Math.round(p * this.samples.length) - 1];\n        var suffix = '.' + Math.floor(p * 100) + 'percentile';\n        return this.serializeMetric(val, 'gauge', this.key + suffix);\n    };\n\n    var percentiles = this.percentiles.map(calcPercentile, this);\n    return points.concat(percentiles);\n};\n\nHistogram.prototype.average = function() {\n    if (this.count === 0) {\n        return 0;\n    } else {\n        return this.sum / this.count;\n    }\n};\n\n\nmodule.exports = {\n    Metric: Metric,\n    Gauge: Gauge,\n    Counter: Counter,\n    Histogram: Histogram\n};\n"}